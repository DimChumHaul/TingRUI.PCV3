<Controls:MetroWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:SVG ="http://metro.mahapps.com/winfx/xaml/iconpacks" 
        xmlns:DK="clr-namespace:TingRUI.Data.Models.DataTemplate;assembly=TingRUI.Data"
        xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:MvvmLight="http://www.galasoft.ch/mvvmlight"
        xmlns:I="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:Data="clr-namespace:TingRUI.Data.Models.DataTemplate;assembly=TingRUI.Data"
        xmlns:Pages="clr-namespace:PCChageTermialV3.TingRUI.ModelViews.Pages"
        xmlns:Sys="clr-namespace:System;assembly=mscorlib"
        x:Class="PCChageTermialV3.TingRUI.MainWindow"
    
        DataContext="{Binding Source={StaticResource Locator},Path=Main}"
        Title="{Binding Path=AppInfo}" Width="1024" Height="768"
        mc:Ignorable="d" x:Name="WinMain"
        WindowStartupLocation="CenterScreen" WindowState="Maximized" 
        Cursor="Arrow" AllowDrop="True" Visibility="Visible" 
        BorderThickness="2.5" Background="{x:Null}">
   
    <!--为了使用MVVMLight中 EventToCommand-[事件转命令] 功能。-->
    <Controls:MetroWindow.LeftWindowCommands>
        <Controls:WindowCommands>
            <Button Click="LaunchMahAppsOnGitHub" ToolTip="MahApps.Metro on GitHub">
                <SVG:PackIconModern Width="22" Height="22" Kind="SocialGithubOctocat" />
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.LeftWindowCommands>
    
    <!--右上角系统标头附加按钮-->
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands ShowLastSeparator="True">
            <ToggleButton Content="确认弹窗" 
                          IsChecked="{Binding QuitConfirmationEnabled}"
                          ToolTip="在弹出框内部确认取消操作" />
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>

    <!-- 顶部菜单栏【模块化】这种UI在WPF的实现中以`样式Style`的方式实现 -->
    <Controls:MetroWindow.Resources>
        <Thickness x:Key="InnerBannerMargin">2.5</Thickness>
        <Thickness x:Key="ItemViewsMargin">2.5</Thickness>

        <!--App菜单栏样式-->
        <Style x:Key="AppThemeMenuItemStyle" BasedOn="{StaticResource MetroMenuItem}" TargetType="{x:Type MenuItem}">
            <Setter Property="Command" Value="{Binding ChangeAccentCommand}" />
            <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
        </Style>

        <!-- 核心模块化布局模板 - 对类型[ModulizedBtn].附加数据模板.DataTemplate -->
        <DataTemplate DataType="{x:Type Data:ModulizedBtn}">
            <Controls:DropDownButton Name="Setting" Margin="{StaticResource ItemViewsMargin}"
                                     Content="{Binding Path=Title}"
                                     Orientation="Vertical" 
                                     Command="{Binding Path=DataContext.LoadModuleCMD,
                RelativeSource={RelativeSource 
                Mode=FindAncestor,
                AncestorType=Controls:MetroTabControl}}"
                                     CommandParameter="{Binding ElementName=TopView,Path=SelectedIndex}"
                                     DisplayMemberPath="{Binding Path=OrderIndex}">
                <!--命令的ICON图标-->
                <Controls:DropDownButton.Icon>
                    <SVG:PackIconModern Margin="5" Kind="{Binding Path=SvgImage}" MinWidth="32" MinHeight="32"/>
                </Controls:DropDownButton.Icon>

                <!--1.模块点击事件 - 1.触发器 2.参数的传递是底层DataModel-->
                <!--<I:Interaction.Triggers>
                    <I:EventTrigger EventName="Click">
                        <MvvmLight:EventToCommand Command="{Binding Path=DataContext.LoadModuleCMD,
                            RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Controls:MetroTabControl}}">
                            <MvvmLight:EventToCommand.CommandParameter>
                                <DK:PrettyModuel Title="...PrettyModuel..." 
                                                 SubTitle="Mvvm分离UI与Data" 
                                                 OrderIndex="5" />
                            </MvvmLight:EventToCommand.CommandParameter>
                        </MvvmLight:EventToCommand>
                    </I:EventTrigger>
                </I:Interaction.Triggers>-->

            </Controls:DropDownButton>
        </DataTemplate>
    </Controls:MetroWindow.Resources>

    <!--首页不设置列定义 全部用1列N行 行内再嵌入复杂布局-->
    <Grid x:Name="MainWinGView" Background="Snow">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="32" />
        </Grid.RowDefinitions>

        <!--网格 Grid.Row[0] :系统菜单栏-->
        <Menu Grid.Row="0" Width="1024" HorizontalAlignment="Left" VerticalAlignment="Stretch">
            <MenuItem Header="主题设置"
                      ItemContainerStyle="{StaticResource AppThemeMenuItemStyle}"
                      ItemsSource="{Binding AppThemes, Mode=OneWay}" />
            <MenuItem Header="色彩" ItemsSource="{Binding AccentColors, Mode=OneWay}" />
            <MenuItem Header="对话框">
                <MenuItem Command="{Binding ShowProgressDialogCommand}" Header="Show ProgressDialog via VM" />
                <MenuItem Command="{Binding ShowCustomDialogCommand}" Header="Show CustomDialog via VM" />
            </MenuItem>
            <MenuItem Header="桌面设置">
                <MenuItem Header="ShowTitleBar"
                          IsCheckable="True"
                          IsChecked="{Binding Path=ShowMyTitleBar, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <MenuItem Header="ShowInTaskbar"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=ShowInTaskbar}" />
                <MenuItem Header="Topmost"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=Topmost}" />
                <Separator />

                <MenuItem x:Name="ShowSeparatorsMI"
                          Header="ShowSeparators (RightWindowCommands)"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=RightWindowCommands.ShowSeparators}" />
                <MenuItem Header="ShowLastSeparator in (RightWindowCommands)"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=RightWindowCommands.ShowLastSeparator}"
                          IsEnabled="{Binding ElementName=ShowSeparatorsMI, Path=IsChecked, Mode=OneWay}" />
                <Separator />
                <MenuItem Command="{Binding ToggleIconScalingCommand}"
                          CommandParameter="{x:Static Controls:MultiFrameImageMode.ScaleDownLargerFrame}"
                          Header="Window icon: scale down larger frame"
                          IsCheckable="True"
                          IsChecked="{Binding IsScaleDownLargerFrame, Mode=OneWay}" />
                <MenuItem Command="{Binding ToggleIconScalingCommand}"
                          CommandParameter="{x:Static Controls:MultiFrameImageMode.NoScaleSmallerFrame}"
                          Header="Window icon: no scale, smaller frame"
                          IsCheckable="True"
                          IsChecked="{Binding IsNoScaleSmallerFrame, Mode=OneWay}" />
                <Separator />
                <MenuItem Header="ShowSystemMenu"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=ShowSystemMenu}" />
                <MenuItem Header="ShowSystemMenuOnRightClick"
                          IsCheckable="True"
                          IsChecked="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Controls:MetroWindow}}, Path=ShowSystemMenuOnRightClick}" />
            </MenuItem>
        </Menu>

        <!--核心布局 Grid.Row[1] :鼎辰模块列表-->
        <Controls:MetroTabControl x:Name="TopView" Grid.Row="1" TabStripPlacement="Bottom">
            <TabItem Header="{Binding Path=AcceptModuels[0]}">
                <Pages:PageIndexHome DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[1]}">
                <Pages:PageChargingRulesSetting DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[2]}">
                <Pages:SubPage3 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[3]}">
                <Pages:SubPage4 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[4]}">
                <Pages:SubPage5 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[5]}">
                <Pages:SubPage6 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[6]}">
                <Pages:SubPage7 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[7]}">
                <Pages:SubPage8 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[8]}">
                <Pages:SubPage9 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[9]}">
                <Pages:SubPage6 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[10]}">
                <Pages:SubPage6 DataContext="{Binding}" />
            </TabItem>
            <TabItem Header="{Binding Path=AcceptModuels[11]}">
                <TextBlock DataContext="{Binding SelectedIdxNo}" />
            </TabItem>
            
        </Controls:MetroTabControl>

        <!--底部实时状态栏跟踪-->
        <StatusBar Grid.Row="2">
            <StatusBarItem>底部实时状态栏</StatusBarItem>
            <Separator Style="{StaticResource MetroStatusBarSeparator}" />
            <StatusBarItem>Selected Tab:</StatusBarItem>
            <StatusBarItem Content="{Binding ElementName=MainTabControl, Path=SelectedItem.Header, Mode=OneWay}" />
        </StatusBar>
        
    </Grid>

</Controls:MetroWindow>
